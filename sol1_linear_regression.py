# -*- coding: utf-8 -*-
"""Sol1. Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1koGHPElsHuXo9HPL4BQkZWRMJkOEHiv4

# THE SPARKS FOUNDATION

## DATA SCIENCE AND BUSINESS ANALYTICS JUNE'**21**

AUTHOR : VADDI JASWANTH REDDY

Task: 1
Prediction using Supervised ML Objective: From given dataset, predict the percentage of an student based on the no. of study hours.

Dataset: http://bit.ly/w-data

IMPORTING LIBRARIES
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all libraries required in this notebook
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

"""IMPORTING DATA"""

# Loading Dataset
df = pd.read_csv("http://bit.ly/w-data")
print("Data Imported")
# Printing the first 10 rows of the dataset
df.head(10)

"""EXPLORE THE DATA"""

# Checking for NaN Values

df.isnull()

# Getting to know more about the dataset
df.info()

df.shape

df.describe()

"""VISUALIZE THE DATA"""

import matplotlib.pyplot as plt

plt.scatter(df.Hours, df.Scores,color = "purple", marker="*")
plt.title("Hours Vs Scores")
plt.xlabel(" Hours -->")
plt.ylabel(" Scores -->")
plt.grid()
plt.show()

"""
From above graph, it's very much clear that Hours and Scores have a linear relation. Thus, a linear regression model will be a perfect fit for solving this problem.
Preparing the data
Here we are using train_test_split() to divide the data, assigning 20% of data for Testing while the remaining 80% data is for Training."""

train = df.iloc[:, :-1].values  
test = df.iloc[:, 1].values

# Using train_test_split() method

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(train,test, test_size = 0.2, random_state = 0)

"""
Building and Training the Model"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(train,test)

print ("Coefficient:-", regressor.coef_)
print ("Intercept:-", regressor.intercept_)

# defining regression line
line = regressor.coef_*train+regressor.intercept_

# plotting for the test data
plt.scatter(X_train, y_train, label='Train Data',color='maroon')
plt.scatter(X_test, y_test, label='Test Data',color='aqua')

plt.plot(train, line, color='orange', label='Linear Regression Line')
plt.title('Hours vs Scores')
plt.xlabel('Hours')
plt.ylabel('Scores')

plt.legend()
plt.show()

"""Actual vs Predicated"""

Y_pred = regressor.predict(X_test)
print(Y_pred)

df = pd.DataFrame({'Actual':y_test, 'Predicted':Y_pred})
df

"""Testing Model Fit"""

# Training and Testing Score
print("Training Score: ", regressor.score(X_train, y_train))
print("Testing Score: ", regressor.score(X_test,y_test))

df.plot(kind='bar',figsize=(7,7))
plt.grid()
plt.show()

# Testing with our own data

hours = 9.25
pred_score = regressor.predict([[9.25]])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(pred_score[0]))

"""Conclusion: For 9.25 hrs/day of study, student will score 92.9 i.e. 93 Marks"""

from sklearn import metrics

print(" Mean Absolute Error:-", metrics.mean_absolute_error(y_test, Y_pred))
print(" Mean Squared Error:-",metrics.mean_squared_error(y_test,Y_pred))
print(" Root Mean Squared Error:-",np.sqrt(metrics.mean_squared_error(y_test,Y_pred)))
print(" Explained Variance Score:-",metrics.explained_variance_score(y_test,Y_pred))
print(" R-2:-", metrics.r2_score(y_test, Y_pred))